doc.tfidf
stopLine = rowSums(doc.tfidf[,2:(len+1)])
stopLine
tempdir()
tempY
head(tempY)
temp[1,1]
tempY[1,1]
tempY[1000,1]
tempY[1:1000,1]
help(trp)
help(rep)
idf
doc.tfidf[1:4,]
doc.tfidf$115
doc.tfidf$`115`
TDM$`115`
ptt_text[69]
tempX
doc.tfidf
doc.tfidf[is.nan(TDM)] = 0
str(doc.tfidf)
doc.tfidf[is.nan(doc.tfidf)] = 0
is.nan(NaN)
doc.tfidf <- TDM
token_len = length(idf)
length(tempX)
summary(tempX)
tempX[1:5]
tempX[1:100]
tempX[1:1000]
tempY[1:1000]
tempY[10000:9999]
tf
idf
doc.tfidf[,2:len]==inf
doc.tfidf[,2:len]==Inf
doc.tfidf[,2:len]==NaN
nrow(TDM)
for(x in 1:nrow(TDM)){
for(y in 2:ncol(TDM))   {
doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y]) * idf[x]
}
}
doc.tfidf <- TDM
token_len = length(idf)
for(x in 1:nrow(TDM)){
for(y in 2:ncol(TDM))   {
doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y]) * idf[x]
}
}
idf
doc.tfidf
tfidf[!is.finite(tfidf)] = 0
doc.tfidf[!is.finite(doc.tfidf)] = 0
str(doc.tfidf)
doc.tfidf[,!is.finite(doc.tfidf[,2:(len+1)])] = 0
is.finite(doc.tfidf[,1])
Make_if_finite = function(d){
d[!is.finite(d)] = 0
}
apply(X = doc.tfidf[,1],Make_if_finite)
apply(X = doc.tfidf[,1], 1,Make_if_finite)
apply(X = doc.tfidf[1:4,1], 1,Make_if_finite)
apply(X = doc.tfidf[1:4,], 1,Make_if_finite)
apply(X = doc.tfidf[1:4,], 2,Make_if_finite)
lapply(doc.tfidf[1:4,],Make_if_finite)
is.finite(Inf)
is.finite(NaN)
doc.tfidf[1,!is.finite(doc.tfidf[1,])]
doc.tfidf[1,!is.finite(doc.tfidf[1,2:len+1])]
doc.tfidf
is.finite(doc.tfidf$d)
is.finite(doc.tfidf$`1`)
!is.finite(doc.tfidf$[c(names(doc.tfidf))])
!is.finite(doc.tfidf[c(names(doc.tfidf))])
Make_if_finite = function(d){
d[!is.finite(d)] = 0
}
doc.tfidf[1,]
doc.tfidf[,1]
doc.tfidf[,2]
doc.tfidf[,!is.finite(doc.tfidf[,1]) ] = 0
doc.tfidf[,1]
doc.tfidf[,!is.finite(doc.tfidf[,2]) ] = 0
doc.tfidf[,2]
for(id in c(2:len+1)){
doc.tfidf[,!is.finite(doc.tfidf[,id]) ] = 0
}
for(id in c(2:len+1)){
doc.tfidf[!is.finite(doc.tfidf[,id]) , id] = 0
}
doc.tfidf
stopLine = rowSums(doc.tfidf[,2:(len+1)])
delID = which(stopLine == 0)
delID
kable(head(doc.tfidf[delID,1]))
doc.tfidf[-delID,]
doc.tfidf[-delID,1]
doc.tfidf = doc.tfidf[-delID,]
TDM = TDM[-delID,]
tf
tf = tf[-delID]
tf
doc.tfidf[order(tf),1]
for( id in c(1:len) ){
Max = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[Max[1:5],1]))
TopWords = rbind(TopWords, showResult)
}
TopWords = data.frame()
for( id in c(1:len) ){
Max = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[Max[1:5],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(len+1)]
TopWords = droplevels(TopWords)
TopWords
for( id in c(1:len) ){
Max = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[Max[1:10],1]))
TopWords = rbind(TopWords, showResult)
}
TopWords = data.frame()
for( id in c(1:len) ){
Max = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[Max[1:10],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(len+1)]
TopWords = droplevels(TopWords)
kable(TopWords)
kable(TopWords)
TopWords = data.frame()
for( id in c(1:len) ){
Max = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[Max[1:10],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(len+1)]
TopWords = droplevels(TopWords)
TopWords
kable(TopWords)
library(ggplot2)
TopNo = 10
tempGraph = data.frame()
for( t in c(1:TopNo) )
{
word = matrix( rep(c(as.matrix(AllTop$Var1[t])), each = n), nrow = n )
temp = cbind( colnames(doc.tfidf)[2:(n+1)], t(TDM[which(TDM$d == AllTop$Var1[t]), 2:(n+1)]), word )
colnames(temp) = c("hour", "freq", "words")
tempGraph = rbind(tempGraph, temp)
names(tempGraph) = c("hour", "freq", "words")
}
#### 進行文字雲視覺化
```{r}
TopNo = 10
TDM$d = as.character(TDM$d)
AllTop = as.data.frame( table(as.matrix(TopWords)) )
AllTop = AllTop[order(AllTop$Freq, decreasing = TRUE),]
tempGraph = data.frame()
for( t in c(1:TopNo) ){
word = matrix( rep(c(as.matrix(AllTop$Var1[t])), each = n), nrow = n )
temp = cbind( colnames(doc.tfidf)[2:(n+1)], t(TDM[which(TDM$d == AllTop$Var1[t]), 2:(n+1)]), word )
colnames(temp) = c("hour", "freq", "words")
tempGraph = rbind(tempGraph, temp)
names(tempGraph) = c("hour", "freq", "words")
}
for( t in c(1:TopNo) ){
word = matrix( rep(c(as.matrix(AllTop$Var1[t])), each = len), nrow = len )
temp = cbind( colnames(doc.tfidf)[2:(len+1)], t(TDM[which(TDM$d == AllTop$Var1[t]), 2:(len+1)]), word )
colnames(temp) = c("hour", "freq", "words")
tempGraph = rbind(tempGraph, temp)
names(tempGraph) = c("hour", "freq", "words")
}
tempGraph
setwd("~/Desktop/CSX_4001_106-2/project1")
knitr::opts_chunk$set(echo = TRUE)
TDM$d = as.character(TDM$d)
AllTop = as.data.frame( table(as.matrix(TopWords)) )
AllTop = AllTop[order(AllTop$Freq, decreasing = TRUE),]
tempGraph = data.frame()
for( t in c(1:TopNo) ){
word = matrix( rep(c(as.matrix(AllTop$Var1[t])), each = len), nrow = len )
temp = cbind( colnames(doc.tfidf)[2:(len+1)], t(TDM[which(TDM$d == AllTop$Var1[t]), 2:(len+1)]), word )
tempGraph = rbind(tempGraph, temp)
}
for( t in c(1:TopNo) ){
word = matrix( rep(c(as.matrix(AllTop$Var1[t])), each = len), nrow = len )
temp = cbind( colnames(doc.tfidf)[2:(len+1)], t(TDM[which(TDM$d == AllTop$Var1[t]), 2:(len+1)]), word )
colnames(temp) = c("hour", "freq", "words")
tempGraph = rbind(tempGraph, temp)
names(tempGraph) = c("hour", "freq", "words")
}
AllTop = as.data.frame( table(as.matrix(TopWords)) )
AllTop = AllTop[order(AllTop$Freq, decreasing = TRUE),]
tempGraph = data.frame()
for( t in c(1:TopNo) ){
word = matrix( rep(c(as.matrix(AllTop$Var1[t])), each = len), nrow = len )
temp = cbind( colnames(doc.tfidf)[2:(len+1)], t(TDM[which(TDM$d == AllTop$Var1[t]), 2:(len+1)]), word )
colnames(temp) = c("hour", "freq", "words")
tempGraph = rbind(tempGraph, temp)
names(tempGraph) = c("hour", "freq", "words")
}
TopWords
str(tempGraph)
tempGraph$freq
tempGraph$hour
for( t in c(1:TopNo) ){
word = matrix( rep(c(as.matrix(AllTop$Var1[t])), each = len), nrow = len )
temp = cbind( colnames(doc.tfidf)[2:(len+1)], t(TDM[which(TDM$d == AllTop$Var1[t]), 2:(len+1)]), word )
colnames(temp) = c("post", "freq", "words")
tempGraph = rbind(tempGraph, temp)
names(tempGraph) = c("post", "freq", "words")
}
TDM$d = as.character(TDM$d)
AllTop = as.data.frame( table(as.matrix(TopWords)) )
AllTop = AllTop[order(AllTop$Freq, decreasing = TRUE),]
tempGraph = data.frame()
for( t in c(1:TopNo) ){
word = matrix( rep(c(as.matrix(AllTop$Var1[t])), each = len), nrow = len )
temp = cbind( colnames(doc.tfidf)[2:(len+1)], t(TDM[which(TDM$d == AllTop$Var1[t]), 2:(len+1)]), word )
colnames(temp) = c("post", "freq", "words")
tempGraph = rbind(tempGraph, temp)
names(tempGraph) = c("post", "freq", "words")
}
tempGraph
#custom option===
end_index = 2411        #最新頁數
start_index = 2356     #最舊頁數
pre_url = "https://www.ptt.cc/bbs/NTU/index"
html_url = ".html"
post_count = 0
guan_count = 0
ptt_text = c()
for(i in c(start_index:end_index)){
url <- paste0(pre_url, i, html_url)                                                #建立url進入看板NTU
links_data_title <- read_html(url) %>% html_nodes(".title") %>% html_text()        #抓取標題
links_data_url <- read_html(url) %>% html_nodes(".title a") %>% html_attr('href')  #抓取標題的連結
post_count = post_count + length(links_data_title)
links_data_title <- str_replace_all(links_data_title,"\t","") %>% str_replace_all("\n","")
flag = xor(grepl("管",links_data_title)|grepl("校長",links_data_title),      #包含的關鍵字
grepl("管理",links_data_title)|grepl("管學院",links_data_title))  #除去的關鍵字
guan_count = guan_count + length(links_data_title[flag])
for(j in (1:length(links_data_title))[flag]){
links_url = paste0('https://www.ptt.cc',links_data_url[j])
content_css = read_html(links_url) %>% html_nodes("#main-content") %>% html_text()
ptt_text = c(ptt_text, iconv(content_css,'utf8'))
}
}                                                                              #進入每一個貼文中抓取文字
data.corpus = Corpus(VectorSource(ptt_text))
data.corpus = tm_map(data.corpus, removePunctuation)
data.corpus = tm_map(data.corpus, removeNumbers)
data.corpus = tm_map(data.corpus, function(word){gsub("[被啊唉礙安吧噓推\n  \t a-zA-Z，。、？！：～ ※→]","",word) })
#清除標點符號、數字、以及其他無用字元
mixseg = worker()
new_user_word(mixseg, as.matrix(keywords))
jieba_tokenizer = function(d){
unlist( segment(d[[1]], mixseg) )
}
seg = lapply(data.corpus, jieba_tokenizer)
count_token = function(d){
as.data.frame(table(d))
}
tokens = lapply(seg, count_token)
len = length(seg)
TDM = tokens[[1]]
for( id in c(2:len) ){
TDM = merge(TDM, tokens[[id]], by="d", all = TRUE)
names(TDM) = c('d', 1:id)
}
for( id in c(2:len) ){
TDM = merge(TDM, tokens[[id]], by="d", all = TRUE)
names(TDM) = c('d', 1:id)
}
TDM[is.na(TDM)] = 0
tf = rowSums(TDM[,2:len+1])
tokens[[1]]
length(tokens)
length(seg)
len = length(seg)
TDM = tokens[[1]]
for( id in c(2:len) ){
TDM = merge(TDM, tokens[[id]], by='d', all = TRUE)
names(TDM) = c('d', 1:id)
}
TDM[is.na(TDM)] = 0
tf = rowSums(TDM[,2:len+1])
idfCal <- function(word_doc){
log2( len / nnzero(word_doc) )
}
idf <- apply(as.matrix(TDM[,2:(len+1)]), 1, idfCal)
doc.tfidf <- TDM
token_len = length(idf)
tempY = matrix(rep(c(as.matrix(tf)), each = token_len), nrow = token_len)
tempX = matrix(rep(c(as.matrix(idf)), each = token_len), ncol = token_len, byrow = TRUE)
doc.tfidf[,2:(len+1)] <- (doc.tfidf[,2:(len+1)] / tempY) * tempX
for(id in c(2:len+1)){
doc.tfidf[!is.finite(doc.tfidf[,id]) , id] = 0
}
stopLine = rowSums(doc.tfidf[,2:(len+1)])
delID = which(stopLine == 0)
doc.tfidf = doc.tfidf[-delID,]
doc.tfidf
TopWords = data.frame()
for( id in c(1:len) ){
Max = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[Max[1:10],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(len+1)]
TopWords = droplevels(TopWords)
TopWords
TopNo = 10                          #擷取前10筆資料
TDM$d = as.character(TDM$d)
AllTop = as.data.frame( table(as.matrix(TopWords)) )
AllTop = AllTop[order(AllTop$Freq, decreasing = TRUE),]
tempGraph = data.frame()
for( t in c(1:TopNo) ){
word = matrix( rep(c(as.matrix(AllTop$Var1[t])), each = len), nrow = len )
temp = cbind( colnames(doc.tfidf)[2:(len+1)], t(TDM[which(TDM$d == AllTop$Var1[t]), 2:(len+1)]), word )
colnames(temp) = c("post", "freq", "words")
tempGraph = rbind(tempGraph, temp)
names(tempGraph) = c("post", "freq", "words")
}
tempGraph
library(varhandle)
install.packages("varhandle")
library(varhandle)
tempGraph$freq = unfactor(tempGraph$freq)
ggplot(tempGraph, aes(hour, freq)) +
geom_point(aes(color = words, shape = words), size = 5) +
geom_line(aes(group = words, linetype = words))
tempGraph$freq = unfactor(tempGraph$freq)
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 5) +
geom_line(aes(group = words, linetype = words))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size=1, colour = "black")) +
geom_line(aes(group = words, linetype = words))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size=1, colour = "black")) +
theme(axis.text = element_blank()) +
geom_line(aes(group = words, linetype = words))
post_count
guan_count
tempGraph$words
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 5,family = "AR PL UKai TW") +
theme(axis.line = element_line(size = 0.5, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
geom_line(aes(group = words, linetype = words))
install.packages("extrafont")
library(extrafont)
font_import()
font()
fonts()
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 5,family = "AR PL UKai TW") +
theme(axis.line = element_line(size = 0.5, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(size = 16 , family = "AppleMyungjo"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 5) +
theme(axis.line = element_line(size = 0.5, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(size = 16 , family = "Arial Rounded MT Bold"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 5) +
theme(axis.line = element_line(size = 0.5, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(size = 16 , family = "Times New Roman"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 5) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(size = 16 , family = "Arial"))
fonts()
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(size = 16 , family = "Apple Braille"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(size = 16 , family = ".Keyboard"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(size = 16 , family = "Comic Sans MS"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(size = 16 , family = "Andale Mono"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(size = 16 , family = "Impact"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(size = 16 , family = "Khmer Sangam MN"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(size = 16 , family = "Tahoma"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
geom_line(aes(group = words, linetype = words))
par(family = "BL")
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
geom_line(aes(group = words, linetype = words))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(family = "BL"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(family = "STHeiti Light"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(family = "STHeitiTC-Light"))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1,text = element_text(family = "STHeitiTC-Light")) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
geom_line(aes(group = words, linetype = words))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1,) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(family = "STHeitiTC-Light")) +
geom_line(aes(group = words, linetype = words))
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 1) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(family = "STHeitiTC-Light")) +
geom_line(aes(group = words, linetype = words))
c(1:3)/c(2,2,2)
str(tempGraph)
tempGraph$post
ggplot(tempGraph, aes(post, freq)) +
geom_point(aes(color = words, shape = words), size = 5) +
theme(axis.line = element_line(size = 1, colour = "black")) +
theme(axis.text = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(text = element_text(family = "STHeitiTC-Light")) +
geom_line(aes(group = words, linetype = words))
post_freq = sample(size = 10,x = (c1:0))
post_freq = sample(size = 10,x =  c(1:0))
post_freq = sample(size = 10)
post_freq = sample(size = 10,x = c(1:10))
post_freq
post_freq = post_count/sum(1:10)
post_freq
post_freq = post_freq/sum(1:10)
post_freq = sample(size = 10,x = c(1:10))
post_freq = post_freq/sum(1:10)
post_freq
post = c(1:10)
freqGraph = data.frame(post,post_freq)
freqGraph
ggplot(tempGraph, aes(post, post_freq)) +
theme(axis.line = element_line(size = 1, colour = "black")) +
geom_line(aes(group = words, linetype = words))
ggplot(freqGraph, aes(post, post_freq)) +
theme(axis.line = element_line(size = 1, colour = "black"))
freqGraph = data.frame(post,post_freq)
ggplot(freqGraph, aes(x = post, y = post_freq)) +
theme(axis.line = element_line(size = 1, colour = "black")) +
geom_line()
